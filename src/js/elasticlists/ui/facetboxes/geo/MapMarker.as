package eu.stefaner.elasticlists.ui.facetboxes.geo {	import eu.stefaner.elasticlists.data.FacetValue;	import eu.stefaner.elasticlists.data.GeoFacetValue;	import eu.stefaner.elasticlists.ui.DefaultGraphicsFactory;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBox;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBoxElement;	import com.modestmaps.geo.Location;	public class MapMarker extends FacetBoxElement {		private static const MIN_HEIGHT : Number = 2;
		private static const MAX_HEIGHT : Number = 12;
		public var location : Location = new Location(0, 0);		public function MapMarker() {			super();		}		override public function init(c : FacetBox, d : FacetValue) : void {			//override public function init(c:FacetBox, d:Object):void {			super.init(c, d);			location = new Location((d as GeoFacetValue).lat, (d as GeoFacetValue).long);		}		override protected function initGraphics() : void {			if(bg == null) {				bg = DefaultGraphicsFactory.getMapMarkerBackground();				addChild(bg);			}			if(selectionMarker == null) {				selectionMarker = DefaultGraphicsFactory.getMapMarkerSelectionMarker();				addChild(selectionMarker);			}			super.initGraphics();			title_tf.visible = false;
		}
		override public function updateStats() : void {			super.updateStats();			/*			var globalNum = facetValue.totalNumContentItems;			var globalRatio = facetValue.globalRatio;			 */			if(facetValue.numContentItems) {				expand();			} else {				collapse();			}		};		override public function collapse() : void {			super.collapse();			visible = false;			height = 0;			width = 0;			mouseEnabled = false;		};		override public function expand() : void {			//var s : Number = ratioToSize(facetValue.localRatio);			var s : Number = Math.sqrt(facetValue.numContentItems) * 3 + 1;			container.transitioner.$(this).width = s;			container.transitioner.$(this).height = s;			mouseEnabled = true;			visible = true;		};		protected function ratioToSize(a : Number) : Number {			var result : Number;			if (!a) {				a = 0;			}			var logScale : Number = 5;			result = Math.floor(MAX_HEIGHT * Math.log(1 + a * logScale) / Math.log(logScale + 1));			result = Math.min(MAX_HEIGHT, Math.max(MIN_HEIGHT, result));			return result;		}	}}