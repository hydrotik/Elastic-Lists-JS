package eu.stefaner.elasticlists.ui.facetboxes.geo {	import eu.stefaner.elasticlists.data.FacetValue;	import eu.stefaner.elasticlists.data.GeoFacet;	import eu.stefaner.elasticlists.data.GeoFacetValue;	import eu.stefaner.elasticlists.ui.DefaultGraphicsFactory;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBox;	import eu.stefaner.elasticlists.ui.facetboxes.FacetBoxElement;	import com.bit101.components.HBox;	import com.bit101.components.HSlider;	import com.bit101.components.PushButton;	import com.greensock.TweenMax;	import com.modestmaps.TweenMap;	import com.modestmaps.core.MapExtent;	import com.modestmaps.events.MapEvent;	import com.modestmaps.mapproviders.OpenStreetMapProvider;	import org.osflash.thunderbolt.Logger;	import flash.display.BlendMode;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	public class GeoFacetBox extends FacetBox {		public var MIN_ZOOM : Number = 4;
		public var MAX_ZOOM : int = 12;
		public var visibleRect : MapExtent;		private var map : TweenMap;		private var setFilterButton : PushButton;
		private var hBox : HBox;
		private var zoomSlider : HSlider;
		private var minusButton : PushButton;
		private var plusButton : PushButton;
		private var resetButton : PushButton;
		private var filterRect : Sprite;	
		private var filterExtent : MapExtent;
		private var ignoreNextAutoZoom : Boolean;
		public function GeoFacetBox() {			super();		}		//---------------------------------------		// GETTER / SETTERS		//---------------------------------------		override public function set height( h : Number ) : void { 			bg.height = h;			if(map) {				resize();			}		}			private function resize() : void {			map.setSize(bg.width, bg.height - 24);			setFilterButton.x = width - setFilterButton.width - 2;			setFilterButton.y = height - 22;			hBox.y = height - 20;			hBox.x = 2;
		}
		override public function set width( w : Number ) : void { 			bg.width = w;			if(map) {				resize();			}		}		override protected function initGraphics() : void {
			super.initGraphics();			initMap();			initButtons();			filterRect = DefaultGraphicsFactory.getSelectionMarker();			filterRect.blendMode = BlendMode.MULTIPLY;			filterRect.visible = false;			filterRect.mouseEnabled = false;			map.addChild(filterRect);
		}
		private function initButtons() : void {			setFilterButton = new PushButton(this, 0, 0, "set filter", onSetFilterClicked);			setFilterButton.x = width - setFilterButton.width - 2;						hBox = new HBox(this, 20, 417);			zoomSlider = new HSlider(hBox, 0, 0, onSliderChange);			zoomSlider.minimum = 0.0;			zoomSlider.maximum = 1.0;			zoomSlider.tick = .01;			zoomSlider.height = 16;						minusButton = new PushButton(hBox, 0, 0, "-", onMinusClick);			minusButton.width = 16;			minusButton.height = 16;						plusButton = new PushButton(hBox, 0, 0, "+", onPlusClick);			plusButton.width = 16;			plusButton.height = 16;						resetButton = new PushButton(hBox, 0, 0, "â€¢", onResetClick);			resetButton.width = 16;			resetButton.height = 16;						hBox.draw();
		}		protected function onResetClick(e : Event) : void {			if(!filterRect.visible) {				map.tweenExtent(getVisibleExtent(), transitioner.duration);			} else {				map.tweenExtent(filterExtent, transitioner.duration);			}		}		protected function onMinusClick(e : Event) : void {			TweenMax.to(map.grid, 0.5, { zoomLevel:  Math.max(MIN_ZOOM, Math.round(map.grid.zoomLevel - 1)) }); 			}		protected function onPlusClick(e : Event) : void {			//map.grid.zoomLevel = ;			TweenMax.to(map.grid, 0.5, { zoomLevel:  Math.min(MAX_ZOOM, Math.round(map.grid.zoomLevel + 1)) }); 			}		protected function onSliderChange(e : Event) : void {			map.grid.zoomLevel = MIN_ZOOM + (MAX_ZOOM - MIN_ZOOM) * zoomSlider.value;		}
		private function onSetFilterClicked(e : Event = null) : void {			Logger.info("filter button clicked");			if(filterRect.visible) {				filterRect.visible = false;				ignoreNextAutoZoom = true;				filterExtent = null;				setFilterButton.label = "set filter";				facet.filter.clearGeoContraints();			} else {				filterRect.visible = true;				filterExtent = map.getExtent().clone();				setFilterButton.label = "clear filter";				facet.filter.addGeoContraint(GeoFacet(facet), filterExtent);			}			renderFilterRect();			dispatchEvent(new Event(FacetBox.SELECTION_CHANGE));		}
		override public function onFacetBoxElementClick(target : FacetBoxElement) : void {			map.panAndZoomBy(MAX_ZOOM - map.grid.zoomLevel, (target as MapMarker).location, null, transitioner.duration);		}		override protected function createFacetBoxElement(facetValue : FacetValue) : FacetBoxElement {			var sprite : MapMarker;						sprite = MapMarker(getNewFacetBoxElement());			sprite.init(this, facetValue);			map.putMarker(sprite.location, sprite);						facetBoxElements.push(sprite);			facetBoxElementForDataObject[facetValue] = sprite;						return sprite;		}		override protected function getNewFacetBoxElement() : FacetBoxElement {			return new MapMarker();		}		//---------------------------------------		// OTHER STUFF		//---------------------------------------		protected function initMap() : void {				/*			map = new Map(bg.width, bg.height, true, new OpenStreetMapProvider());			addChild(map);			map.addChild(new MapControls(map));			 */			map = new TweenMap(bg.width, bg.height, true, new OpenStreetMapProvider(MIN_ZOOM, MAX_ZOOM));					//map.addChild(new MapCopyright(map, 143, 10));			//map.addChild(new ZoomBox(map));			//map.addChild(new ZoomSlider(map));			//map.addChild(new NavigatorWindow(map));			//map.addChild(new MapControls(map));			//map.addChild(new MapScale(map, 140));			map.addEventListener(MouseEvent.DOUBLE_CLICK, map.onDoubleClick);			map.addEventListener(MouseEvent.MOUSE_WHEEL, map.onMouseWheel); 			// listen for map events			map.addEventListener(MapEvent.STOP_ZOOMING, onMapChange);			map.addEventListener(MapEvent.STOP_PANNING, onMapChange);			map.addEventListener(MapEvent.EXTENT_CHANGED, renderFilterRect);			map.addEventListener(MapEvent.PANNED, renderFilterRect);			addChild(map);						TweenMax.to(map.grid, .01, {colorMatrixFilter:{saturation:0.1, brightness:1, contrast:1.5}, alpha:.5});		};		private function onMapChange(e : MapEvent) : void {			try {				//updateFiltersFromVisibleArea();				zoomSlider.value = (map.grid.zoomLevel - MIN_ZOOM) / (MAX_ZOOM - MIN_ZOOM);				renderFilterRect();					}catch(error : Error) {			}		};		private function renderFilterRect(e : Event = null) : void {			if(filterRect.visible) {				var p : Point = map.locationPoint(filterExtent.southWest, map);				var p2 : Point = map.locationPoint(filterExtent.northEast, map);				filterRect.x = p.x;				filterRect.y = p2.y;				filterRect.width = p2.x - p.x;				filterRect.height = p.y - p2.y;			}
		}
		private function updateFiltersFromVisibleArea() : void {			//this.visibleRect = map.getExtent();			/*			 // need to improve this			for each (var f:GeoFacetValue in data) {				f.selected = f.isInRegion(this.visibleRect);			}						dispatchEvent(new Event(FacetBox.SELECTION_CHANGE));			 * 			 */		};		override protected function doPositioning() : void {			if(!filterRect.visible && !ignoreNextAutoZoom) map.tweenExtent(getVisibleExtent(), transitioner.duration);			ignoreNextAutoZoom = false;			 /*			trace("MAP ZOOM " + map.getZoom());			var z : int = map.getZoom(); 			for each (var sprite:MapMarker in facetBoxElements) {				sprite.scaleX = sprite.scaleY = .5 + Math.sqrt(z) * .5;			}			 * 			 */		};		private function getVisibleExtent() : MapExtent {			var m : MapExtent;								for each(var f:GeoFacetValue in facet.facetValues) {				// TODO: does not respect the case where facetvalue might be hidden because of maxItems contraint 				if(f.numContentItems) {					if(m == null) m = new MapExtent(f.lat, f.lat, f.long, f.long);					m.enclose(f.location);				}			}			if(m == null) m = new MapExtent();			var padding : Number = 1;			m.north -= padding;			m.west -= padding;			m.south += padding;			m.east += padding;						 			return m;		}						//	GETTERS/SETTERS:				//	PRIVATE METHODS:	}}